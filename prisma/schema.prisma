generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cards {
  id             Int      @id(map: "cards_pk") @default(autoincrement())
  userId         Int
  title          Int
  number         String
  name           String
  securityCode   String
  expirationDate String
  password       String
  isVirtual      Boolean
  createdAt      DateTime @default(now()) @db.Timestamp(6)
  users          users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cards_fk0")
}

model credentials {
  id        Int      @id(map: "credentials_pk") @default(autoincrement())
  userId    Int
  title     String
  url       String
  username  String
  password  String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  users     users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "credentials_fk0")
}

model notes {
  id        Int    @id(map: "notes_pk") @default(autoincrement())
  userId    Int
  title     String @unique
  note      String
  createdAt String @default(dbgenerated("now()"))
  users     users  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "notes_fk0")
}

model users {
  id          Int           @id(map: "users_pk") @default(autoincrement())
  email       String        @unique
  password    String
  cards       cards[]
  credentials credentials[]
  notes       notes[]
  wifis       wifis[]
}

model wifis {
  id        Int      @id(map: "wifis_pk") @default(autoincrement())
  userId    Int
  title     String
  name      String
  password  String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  users     users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "wifis_fk0")
}
